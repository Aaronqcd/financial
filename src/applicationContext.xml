<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	default-lazy-init="true">
	
	 <!-- 启动spring注解 -->
    <context:annotation-config />
    
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>				 
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>
	 	
	<context:component-scan base-package="com.kljx" use-default-filters="false" >   
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>   
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>   
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>   
    </context:component-scan>
    
   <bean id="threadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
	    <!-- 核心线程数  -->
	    <property name="corePoolSize" value="1" />
	    <!-- 最大线程数 -->
	    <property name="maxPoolSize" value="10" />
	    <!-- 队列最大长度 >=mainExecutor.maxSize -->
	    <property name="queueCapacity" value="20" />
	    <!-- 线程池维护线程所允许的空闲时间 -->
	    <property name="keepAliveSeconds" value="300" />
	    <!-- 线程池对拒绝任务(无线程可用)的处理策略 -->
	    <property name="rejectedExecutionHandler">
	        <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
	    </property>   
    </bean>
            
    <bean id="workflow" class="com.kljx.workflow.WorkflowFactory" lazy-init="false"></bean>
	
	<!-- 使用DRUID对数据库连接池进行管理 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	<property name="driverClassName" value="${jdbc.driver}" />
    	<property name="url" value="${jdbc.url}" />
    	<property name="username" value="${jdbc.username}" />
    	<property name="password" value="${jdbc.password}" />

    	<!-- 配置初始化大小、最小、最大 -->
    	<property name="initialSize" value="5" />
    	<property name="minIdle" value="5" />
    	<property name="maxActive" value="200" />

    	<!-- 配置获取连接等待超时的时间 -->
    	<property name="maxWait" value="60000" />

    	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    	<property name="timeBetweenEvictionRunsMillis" value="60000" />

    	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    	<property name="minEvictableIdleTimeMillis" value="300000" />

    	<property name="testWhileIdle" value="true" />

    	<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
    	<!--这两项配置会降低连接池的性能
        <property name="testOnBorrow" value="false" />
    	<property name="testOnReturn" value="false" />
        -->

    	<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    	<property name="poolPreparedStatements" value="true" />
    	<property name="maxOpenPreparedStatements" value="1000"/>
    	<property name="maxPoolPreparedStatementPerConnectionSize" value="1000" />
    	<!--  
        <property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=publickey" />
        -->
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />
        <!-- 超时时间；单位为秒。180秒=3分钟 -->
        <property name="removeAbandonedTimeout" value="180" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

    	<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 
    	<property name="defaultAutoCommit" value="true" />
        -->
        
    	<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
    	<property name="validationQuery" value="SELECT 'x'" />
    	
    	<!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall -->
    	<!-- <property name="filters" value="stat" /> -->
    	<property name="filters" value="config" />
    	
    	<property name="proxyFilters">
    		<list>
    		    <!-- <ref bean="logFilter" />  -->
    		    <!-- <ref bean="log-filter" /> -->
    		    <ref bean="stat-filter" />
    			<ref bean="Log4jFilter" />
                <ref bean="wall-filter" />
    		</list>
    	</property>
    </bean>
    
   <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
	   	<!--慢SQL统计，如果SQL执行时间超过一定时间则记录为慢SQL  -->
	   	<property name="slowSqlMillis" value="3000" />
	   	<!--慢SQL统计日志输出  -->
	   	<property name="logSlowSql" value="true" />
	   	<!--合并SQL统计 例如select * from table t where t.id =1，会被变为select * from table t where t.id =？来统计  -->
	   	<property name="mergeSql" value="true" />
   </bean>

   <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
	   	<!-- 指定配置装载的目录  -->
	   	<property name="dir" value="META-INF/druid/wall/mysql" />
	   	<property name="selectWhereAlwayTrueCheck" value="false" />
	   	<property name="selectHavingAlwayTrueCheck" value="false" />
   </bean>
   
   <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql" />
        <property name="config" ref="wall-filter-config" />
   </bean>

    <!-- 打出可执行的SQL日志 -->
    <bean id="Log4jFilter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>
    
    <!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 开启事务控制的注解支持 -->  
    <tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- mybatis sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- XML文件的SQL标记ID 与DAO中的接口标记一致 -->
	<bean id="userDao" class="org.mybatis.spring.MapperFactoryBean">
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" /> 
        <property name="mapperInterface" value="com.kljx.dao.UserDao"/>
    </bean>
    	 	 
	<!-- 事务代理类 -->
  	<!-- 
	<bean id="transactionBaseService" abstract="true"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager">			 
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="query*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="parse*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
 	  -->
	<!-- 事务通知 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*" rollback-for="Throwable"/>
		</tx:attributes>
	</tx:advice>
	<aop:config  proxy-target-class="true">
		<aop:pointcut id="fooServiceOperation" expression="execution(* com.hzquanwei.tmmp.service.RoleServiceImpl.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/>
	</aop:config> -->
	  
		<!--<tx:annotation-driven proxy-target-class="true"/> -->
	  
	
 	<!-- 	 
	<bean id="preformanceThresholdInterceptor" class="com.hzquanwei.tmmp.interceptor.PreformanceThresholdInterceptor">
		<property name="opLogService" ref="opLogServiceAgent" />
	</bean>	
	<bean id="performanceThresholdProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<value>preformanceThresholdInterceptor</value>
		</property>
	</bean>	
  -->	
	<!-- 拦截固定样式 的method-->
	<!--
		<bean id="logAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="preformanceThresholdInterceptor"> <bean
		class="com.hzquanwei.tmmp.action.PreformanceThresholdInterceptor"/>
		</property> <property name="patterns"> <list>
		<value>.*delete.*</value> </list> </property> </bean>
	-->
	<!-- <import resource="applicationContext-common.xml" />
	<import resource="applicationContext-action.xml" /> -->
	
</beans>